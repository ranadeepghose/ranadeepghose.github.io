[ { "title": "Working with Local Repositories - Git for Dummies, Part 04", "url": "/posts/working-with-local-repositories-git-for-dummies-part-04/", "categories": "Git, How To", "tags": "intro", "date": "2022-08-22 10:35:00 +0530", "snippet": "Use Git with Local RepositoryWe have learnt how to install and configure Git already. Now we will see how we can use Git with a local repository.A repository, often called a repo in short, is noting more than a collection of files and folders along with the history of the changes made to them. The changes are tracked with the help of commits which are snapshots of a particular file at various points of time in the file’s history. The commits help us to refer or revert back to a place in the file’s timeline if there are bugs / errors in the code. It must be remembered that commits are not automatic. We have to manually stage a commit after making a series of changes in a file.If you have a project directory that is in your local machine and does not have version control, you can easily add Git to it. The first step here is to go into the project’s directory:// in Linuxcd /home/user/&lt;Project Directory&gt;// in MacOScd /Users/user/&lt;Project Directory&gt;// in Windowscd C:/Users/user/&lt;Project Directory&gt;and then use the init command:git initGit InitThe init command creates a new subdirectory named .git inside your project folder. This is the skeleton repository of Git - everything that Git stores and manipulates, is located in this subdirectory.A newly-initialized .git directory contains the following structure:configdescriptionHEADhooks/info/objects/refs/ config - This file contains the project-specific configuration options. description - This file is only used by the GitWeb Program. info/ - This directory keeps a global exclude file for all ignored patterns that are not supposed to be tracked in a .gitignore file. hooks/ - This directory contains client-side or server-side hook scripts. Learn more about Git Hooks.The remaining four entries of the structure, the HEAD, the objects/ directory, the refs/ directory and the not-yet created index files are the core parts of Git. objects/ - This directory stores all the content for your database. refs/ - This directory stores pointers into commit objects in that data (branches, tags, remotes etc.). HEAD - This file points to the branch you currently have checked out. index - This file is where Git stores your staging area information.Staging Area - Git AddSo now if you make changes to a certain file within your project and want Git to track the changes, you need to add the file to the staging area. (Remember the diagram from How Git Works in Part 01?)Git recognizes when a file is modified, but it does not track it automatically unless you stage it. The staging area provides a security layer where you can review the changes before finally committing them.So check which files Git is tracking with the git status command and then to add a file to the staging are, use the following command:git add [filename]You must replace the [filename] with the actual name of the file you have made changes to e.g. if you have modified a style.css file, your command would begit add style.cssYou can also stage all the files in the working directory by runninggit add .So what happens if you have made a mistake and want to remove a file from the staging area. To unstage a file, use the following commandgit rm --cached [filename]So to remove style.css from the staging area, you will need to writegit rm --cached style.cssMaking Commits with Git CommitOnce file(s) are staged, they are ready for the final commit. A commit is a save point, more like a snapshot of your file at a particular point of time. You can refer or revert back to these points whenever you want.To check if you have any files ready to be committed you can again use the git status command. And when there are files ready to be committed, we usegit commit -m \"Remarks about Commit\"The above command with commit the staged file(s) with a short note which describes the changes. The -m flag is a must, followed by a short description / note / remark about the commit that will help to identify later what the commit was about. It is good practice to provide clear, short, simple and descriptive commit messages for every commit, as it helps to understand what a commit is all about.To check the history of commits, you can run the git log command. The output shows a log of all the commits made, who made the commit, the date of the commit and the commit notes.Revert a CommitIf for any reason you want revert a commit you can use the git revert command - undoes the commit you made to remove the changes from the master branch. The command does not remove the commit from commit history. It only adds a new commit specifying that it has reverted the specified commit.To revert to a specific commit, you must first find the commit ID. It is a 7 character code you can see at the beginning of each commits when you run the git log command. Once you have the commit ID, rungit revert [commit ID]Git ResetIf you are sure that wish to undo or delete parts of your code and you will not need it anymore, you can do a git reset. This command permanently takes you back to a certain point in your development process and all changes after that point are unstaged.To reset, usegit reset [commit ID] Please note that git reset is permanent and irreversible. You can also specify a --hard flag. This will remove all unstaged files permanently.BranchesBranches are used by developers for modifying files, to fix bugs or develop new features without disturbing the working portions of the project.The main branch is generally named master and is reserved for clean, working version of the code. It is the stable version which is already released or published.Branching creates an isolated environment where code is modified for various purposes and if finalized, the branch can be merged with the master. Generally new branches are named after the issue it is fixing or the feature it is implementing. Git keeps track of all branches and so you can jump to any branch or from branches to branches without overwriting or disturbing other branches in the repo.To create a Git branch, use the following command:git branch [branch-name] Please replace [branch-name] with the name of your branch.Some basic commands for git branch are: Option Description -r List the remote branches -a Show both local &amp; remote branches -m Rename old branch -d Delete a branch -r -d Delete a remote branch MergingWhen a branch is ready, it needs to be merged with the master. For this we use the git merge command. Merging changes means implementing the changes into the master branch.To see the existing branches, use the following command:git branch -aThis will give you a list of all the branches you have. If you are working on a branch, before you merge you need to switch to the branch you want to merge into, e.g. if you are working on a branch named new-features, and you want to merge this branch into the master branch, then you need to switch to the master branch first. To do this, use the following command:git checkout masterAfter you have switched on to the master branch use the following command to merge the changes:git merge [branch-name] Please replace [branch-name] with the name of your branch.And with that Git automatically inputs your changes to the master branch.In the next part, we will learn how to work with Git remote repositories." }, { "title": "Git Configurations - Git for Dummies, Part 03", "url": "/posts/git-configurations-git-for-dummies-part-03/", "categories": "Git, How To", "tags": "intro", "date": "2022-08-22 06:45:00 +0530", "snippet": "Configure GitPreviously, we have discussed about how to install Git on various platforms. After you install Git, the next step is to configure it before it us used for the first time.To configure Git, we use the command git config. This command can accept parameters and arguements and can set and obtain the configuration variables.There are 3 different configuration levels in Git. They are: System (--system) - This configuration level covers an entire user, machine and all the repos in it. Changes made in this level affects the entire system and all repos in the system is affected. Editing the system level configuration is often discouraged because of this. Global (--global) - This configuration level affects the User level. This means that configuration changes will apply to all the files of the user who is currently operating the system. Repository (--local) - This configuration level only affects a specific repo (repository). The configuration variables can be located at various places depending on your platform.In GNU/Linux systems they are generally located in 3 different places: /etc/gitconfig - stores System Level configurations. ~/.gitconfig - stores Global configurations. ~/&lt;RepoFolder&gt;/.git/config - stores Repository Level configurations.In Windows system, they are located in: C:\\Documents\\Git\\etc\\gitconfig - stores System Level configurations. C:\\Document and Settings\\&lt;UserName&gt;\\.gitconfig or C:\\Users\\&lt;UserName&gt;\\.gitconfig - stores Global configurations. C:\\&lt;RepoFolder&gt;\\.git\\config - stores Repository Level configurations.In Mac, config files are located similar to Linux: /usr/local/git/etc/gitconfig - stores System Level configurations. ~/.gitconfig - stores Global configurations. ~/&lt;RepoFolder&gt;/.git/config - stores Repository Level configurations.Configure Username and EmailAfter installing, the first step should be to set your username and email correctly.To set up Git username and email use the following commands:git config --global user.name &lt;your name&gt;git config --global user.email &lt;user@email.com&gt; Please replace &lt;your name&gt; and &lt;user@email.com&gt; with your own name and email.Configure Default Text EditorBy default, Git uses your default text editor through one of the shell environment variables VISUAL or EDITOR. Otherwise it falls back to the vi editor. However, if you wish to set one of your favorite editors as default, you need to use the core.editor setting, e.g.git config --global core.editor editor-name To setup Sublime Text as default editor in Windows:git config --global core.editor \"'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w\"or in Mac/Linux:git config --global core.editor \"'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w\" To setup VSCode as default editor:git config --global core.editor \"code --wait\" To setup Atom as default editor:git config --global core.editor \"atom --wait\"List ConfigurationsOnce the basic configuration is in place, use the following command to check if the configurations have updated:git config --listThe output of the above command should echo the following information:user.name=exampleuseruser.email=user@email.comcore.editor=editor-nameThese were the basic configurations you will need to start working with Git. However, there are several other configuration parameters that you can modify as per your requirements. You can find a full and detailed list of Git Configuration here.That’s all for now, in the next part we will discuss how to use Git with a Local Repository." }, { "title": "Git Installation - Git for Dummies, Part 02", "url": "/posts/git-installation-git-for-dummies-part-02/", "categories": "Git, How To", "tags": "intro, installation process", "date": "2022-08-14 07:51:00 +0530", "snippet": "How to Use GitIn the first part of this series, we have discussed about the history, use and concepts of Git. To actually use Git, we need to have the program installed in our system. Let’s see how to install Git in various platforms like MacOS, Windows and Linux.InstallationHow to Install Git on MacOSThere are several ways of installing Git in MacOS. In fact, if XCode or its CLI (Command Line Interface) is installed, their is a fair chance that Git has already been installed along with it. To find out if your MacOS has Git installed, open the Terminal and enter the following code:git --versionIf it is installed in your Mac, it will return the Git version; if not, it will show the following message:Click on the install button to install developer tools required to use Git on your Mac. The developer tools include XCode and XCode App Development utilities.Install Git with HomebrewHomebrew is a popular package manager for MacOS and Linux. If you do not have Homebrew in your Mac, you can install the same with the following command:/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"Once installed, make sure you update to the latest version with the following command:brew updateFinally, once Homebrew is installed and updated, enter the following command to install Git:brew install gitInstall Git with MacPortsIf you already have MacPorts installed to manage packages on MacOS, use the following instructions to install Git: Update MacPorts from the Terminalsudo port selfupdate Search for the latest Git ports and variations:port search gitport variants git Install Git with bash completion, the OS X keychain helper, and the docs:sudo port install git +bash_completion+credential_osxkeychain+docHow to Install Git on WindowsIf you are a Windows user, it is easy to install Git with the standalone installer. Download the latest Git Installer for Windows. Double click on the installer to start the installation process. When you see the install prompt, click on Yes button, agree to the terms and follow the Next and Finish prompts to complete the installation. The default options are suitable for most users.You can now use the Windows Command Prompt or Git Bash to start using Git.How to Install Git on Linux with Package ManagersCheck first to see if Git is already installed in your system withgit --versionIf already installed, it will return the Git version, if not, it will give the following error:-bash: git: command not foundInstalling Git on Ubuntu or DebianFor Ubuntu or Debian, Git packages are available through APT (Advanced Package Tool).To install Git using apt-get, first run the update command.sudo apt-get updateThen run the install command.sudo apt-get install gitAnd finally verify the installation was successful by running the version command.git --versionIf successfully installed, it will return the Git version.Installing Git on FedoraFor Fedora, Git packages are available through dnf and yum.For dnf, use the following command from the shellsudo dnf install gitor the following for yumsudo yum install gitVerify the installation was successful by running the version command.git --versionIf successfully installed, it will return the Git version.Installing Git on CentOSFor CentOS, Git can be installed using yum, similar to Fedora.Installing Git on Arch LinuxArch Linux uses pacman to install Git with the following command:sudo pacman -Sy gitInstalling Git on GentooFor Gentoo, use emerge to install Git.sudo emerge --ask --verbose dev-vcs/gitHow to Install Git on Linux from SourceFor Ubuntu / Debian Install necessary dependencies using apt-get.sudo apt-get updatesudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev asciidoc xmlto docbook2x Clone the Git source.git clone https://git.kernel.org/pub/scm/git/git.git To build Git and install it under /usr, run make:make all doc info prefix=/usrsudo make install install-doc install-html install-info install-man prefix=/usrFor Fedora You can install the necessary build dependencies with dnf from your shell:sudo dnf install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel asciidoc xmlto docbook2XOr if you are using yum, you may need to install the Extra Packages for Enterprise Linux (EPEL) repository first:sudo yum install epel-releasesudo yum install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel asciidoc xmlto docbook2X Symlink docbook2X to the filename that the Git build expects:sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi Clone the Git source.git clone https://git.kernel.org/pub/scm/git/git.git To build Git and install it under /usr, run make:make all doc prefix=/usrsudo make install install-doc install-html install-man prefix=/usrFor CentOS Install dependencies first:sudo yum group install \"Development tools\"sudo yum install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel Next, from Git’s release page select a stable Git version (one without an -rc suffix) you prefer to install. Once you have selected the preferred Git version, right click and copy the link of the file with the tar.gz extension. Download the selected url with wget: wget https://github.com/git/git/archive/refs/tags/v2.37.2.tar.gz -O gitdownloadversion.tar.gzThis command downloads v2.37.2.tar.gz as gitdownloadversion.tar.gz. Use the following command to unpack the file using tar, then decompress and extract the file using -zxf option:tar -zxf gitdownloadversion.tar.gz Change directory to the new unpacked folder:cd gitdownloadversion-* To compile the downloaded Git files, create a Makefile:make configure./configure --prefix=/usr/local When Makefile is ready, compile and install:sudo make install Verify the installation was successful by running the version command.git --versionIf successfully installed, it will return the Git version.So that is how you can install Git on your system. In the next part, we will discuss how to configure Git before we can use it." }, { "title": "How Git Works - Git for Dummies, Part 01", "url": "/posts/how-git-works-git-for-dummies-part-01/", "categories": "Git, How To", "tags": "intro", "date": "2022-08-14 03:41:00 +0530", "snippet": "What is a Version Control System?Version control systems are software tools that helps to keep track of modifications made to codes and files. Software development often requires collaboration of several developers who might not be sharing the same locations. However, each of them make certain contribution to the development by making changes to the codes and files. A separate branch is created everytime a contributor makes some changes and once the code is analyzed and green-signalled, they changes are merged with the main source codes. It keeps the source code organized and makes the development process smooth.Git is a version control system.Brief History of GitDuring the early years of Linux Kernel development (1991 - 2002), Linus Torvalds, who is the creator and historically, the main developer of Linux kernel had a large number of volunteer developers working on the project and their contributions had to be managed. Initially all changes to the software were passed around in patches and stored in archives.However, in 2002 the project started using a proprietary DVCS (distributed version control system) called BitKeeper. It was a great tool for managing all the developer contributions and in spite of being a paid software, it was available to Linux developers for free due to an agreement between the two parties.Everything was fine until April 2005, when Andrew Tridgell, an Australian computer programmer, tried to produce a free software, now known as SourcePuller which interoperated with the BitKeeper source code repository. This led to a fiery controversy which resulted in BitKeeper revoking the tool’s free-of-charge status for Linux developers. Many developers lost their access to the BitKeeper and Linus Torvalds knew that he had to come up with something fast. It is said that he took a vacation! And the result of that vacation was the birth of a new version control system - Git!Why is Git Popular?Git has several strong features like Simple in design Small and speedy Strong support for non-linear development (thousands of parallel branches) Fully distributed Automatic garbage collectionHow Git Works?Git uses simple commands to allow users to track code changes and manage projects. At the very center of Git is a repository which contains a project. This repository can be stored locally or on the web, e.g. GitHub. Throughout the process of development, a project has several save points. These save points are called commits. A commit history contains all the changes implemented during the development process and allows smooth rollback or fast forward to any point in the commit history. Git uses SHA-1 hashes to refer to the commits. Every commit has an unique hash pointing towards it. This allows Git to create a tree-like structure to store and retrieve data.In a typical Git project, the files go through the following stages: Working Directory: This is where the modified files are. They are not yet tracked and not ready for commit. Staging Directory: The modified files are added to this area for reviewing the changes before making the final commit. Committed: Snapshots of files from Staging Area are saved in the commit history.A basic Git workflow is explained in the following diagram. sequenceDiagram Working Directory -&gt;&gt; Staging Area: git add Staging Area -&gt;&gt; Committed Files: git commit Committed Files -&gt;&gt; Remote Repository: git push Remote Repository -&gt;&gt; Committed Files: git fetch Committed Files -&gt;&gt; Working Directory: git checkout Committed Files -&gt;&gt; Working Directory: git mergeNow that we know the basic concepts of Git, we will dive into how to install Git on MacOS, Windows and Linux in the next part." } ]
